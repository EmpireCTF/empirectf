(declare-const flag (_ BitVec 64))
(declare-const u1a (_ BitVec 64))
(declare-const u1b (_ BitVec 64))
(declare-const u2a (_ BitVec 64))
(declare-const u2b (_ BitVec 64))
(declare-const u2c (_ BitVec 64))
(declare-const u2d (_ BitVec 64))
(declare-const lu3a (_ BitVec 64))
(declare-const lu3b (_ BitVec 64))
(declare-const u3a (_ BitVec 64))
(declare-const u3b (_ BitVec 64))
(declare-const u3c (_ BitVec 64))
(declare-const u3d (_ BitVec 64))
(declare-const u4a (_ BitVec 64))
(declare-const u4b (_ BitVec 64))
(declare-const u5a (_ BitVec 64))
(declare-const u5b (_ BitVec 64))
(declare-const u5c (_ BitVec 64))
(declare-const u5d (_ BitVec 64))
(declare-const lu6a (_ BitVec 64))
(declare-const lu6b (_ BitVec 64))
(declare-const u6a (_ BitVec 64))
(declare-const u6b (_ BitVec 64))
(declare-const u6c (_ BitVec 64))
(declare-const u6d (_ BitVec 64))
(declare-const u7a (_ BitVec 64))
(declare-const u7b (_ BitVec 64))
(declare-const bs1 (_ BitVec 64))
(declare-const bs2 (_ BitVec 64))
(declare-const bs3 (_ BitVec 64))
(assert (= bs1 #b1101111010101101110000001101111011011110101011011100000011011110))
(assert (= bs2 #b0001001100110111000100110011011100010011001101110001001100110111))
(assert (= bs3 #b0001111100010101101000010101010110101000101100111000010000001010))
(assert (= u1a (bvor (bvand (bvnot flag) (bvnot bs1)) (bvand flag bs1))))
(assert (= u1b (bvor (bvand (bvnot flag) bs1) (bvand flag (bvnot bs1)))))
(assert (= u2a (bvor (bvand (bvor (bvshl u1a #x0000000000000001) #x0000000000000001) u1a) (bvand (bvshl u1b #x0000000000000001) u1b))))
(assert (= u2b (bvor (bvand (bvor (bvshl u1a #x0000000000000001) #x0000000000000001) u1b) (bvand (bvshl u1b #x0000000000000001) u1a))))
(assert (= u2c (bvor (bvor (bvand (bvor (bvshl u1a #x0000000000000001) #x0000000000000001) u1a) (bvand (bvor (bvshl u1a #x0000000000000001) #x0000000000000001) u1b)) (bvand (bvshl u1b #x0000000000000001) u1a))))
(assert (= u2d (bvand (bvshl u1b #x0000000000000001) u1b)))
(assert (= lu3a (bvand u2c u3c)))
(assert (= lu3b (bvor u2d u3d)))
(assert (= u3a (bvor (bvand u2a (bvor (bvshl lu3a #x0000000000000001) #x0000000000000001)) (bvand u2b (bvshl lu3b #x0000000000000001)))))
(assert (= u3b (bvor (bvand u2a (bvshl lu3b #x0000000000000001)) (bvand u2b (bvor (bvshl lu3a #x0000000000000001) #x0000000000000001)))))
(assert (= u3c (bvor (bvor (bvand u2a (bvor (bvshl lu3a #x0000000000000001) #x0000000000000001)) (bvand u2a (bvshl lu3b #x0000000000000001))) (bvand u2b (bvor (bvshl lu3a #x0000000000000001) #x0000000000000001)))))
(assert (= u3d (bvand u2b (bvshl lu3b #x0000000000000001))))
(assert (= u4a (bvor (bvand u3a (bvor (bvlshr u3a #x0000000000000001) #x8000000000000000)) (bvand u3b (bvlshr u3b #x0000000000000001)))))
(assert (= u4b (bvor (bvand u3a (bvlshr u3b #x0000000000000001)) (bvand u3b (bvor (bvlshr u3a #x0000000000000001) #x8000000000000000)))))
(assert (= u5a (bvor (bvand ((_ rotate_right 1) u4a) (bvnot bs2)) (bvand ((_ rotate_right 1) u4b) bs2))))
(assert (= u5b (bvor (bvand ((_ rotate_right 1) u4a) bs2) (bvand ((_ rotate_right 1) u4b) (bvnot bs2)))))
(assert (= u5c (bvor (bvor (bvand ((_ rotate_right 1) u4a) (bvnot bs2)) (bvand ((_ rotate_right 1) u4a) bs2)) (bvand ((_ rotate_right 1) u4b) (bvnot bs2)))))
(assert (= u5d (bvand ((_ rotate_right 1) u4b) bs2)))
(assert (= lu6a (bvand u5c u6c)))
(assert (= lu6b (bvor u5d u6d)))
(assert (= u6a (bvor (bvand u5a (bvor (bvshl lu6a #x0000000000000001) #x0000000000000001)) (bvand u5b (bvshl lu6b #x0000000000000001)))))
(assert (= u6b (bvor (bvand u5a (bvshl lu6b #x0000000000000001)) (bvand u5b (bvor (bvshl lu6a #x0000000000000001) #x0000000000000001)))))
(assert (= u6c (bvor (bvor (bvand u5a (bvor (bvshl lu6a #x0000000000000001) #x0000000000000001)) (bvand u5a (bvshl lu6b #x0000000000000001))) (bvand u5b (bvor (bvshl lu6a #x0000000000000001) #x0000000000000001)))))
(assert (= u6d (bvand u5b (bvshl lu6b #x0000000000000001))))
(assert (= u7a (bvor (bvand (bvnot bs3) u6a) (bvand bs3 u6b))))
(assert (= u7b (bvor (bvand (bvnot bs3) u6b) (bvand bs3 u6a))))
(assert (= u7a #xffffffffffffffff))
(check-sat)
(get-model)
